import '../../../dist/types/stencil.core';
import { EventEmitter } from '../../../dist/types/stencil.core';
export declare class EonInput {
    element: HTMLElement;
    accept: string | undefined;
    autocapitalize: string;
    autocomplete: 'off' | 'on';
    autocorrect: 'off' | 'on';
    autofocus: boolean;
    clearInput: boolean;
    clearOnEdit: boolean | undefined;
    color: string | undefined;
    debounce: number;
    disabled: boolean;
    inputmode: string | undefined;
    max: string | undefined;
    maxlength: number | undefined;
    min: string | undefined;
    minlength: number | undefined;
    mode: 'ios' | 'md';
    multiple: boolean | undefined;
    name: string;
    pattern: string | undefined;
    placeholder: null | string | undefined;
    readonly: boolean;
    required: boolean;
    size: number | undefined;
    spellcheck: boolean;
    step: string | undefined;
    type: 'date' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'time' | 'url';
    value: null | string | undefined | number;
    bind: string;
    bindSelector: string;
    errorSelector: string;
    errorMsg: string;
    successMsg: string;
    eonBlur: EventEmitter;
    eonFocus: EventEmitter;
    eonInput: EventEmitter;
    eonInputDidLoad: EventEmitter;
    eonInputDidUnload: EventEmitter;
    eonChange: EventEmitter;
    private _value;
    componentDidLoad(): void;
    setValue(value?: string): void;
    getName(): string;
    getValue(): any;
    clear(): void;
    setFocus(): void;
    watchTrueValue(): void;
    watchValue(): void;
    updateBinding(value: any): void;
    updateValue(event: any): void;
    validate(requireMsg?: boolean): boolean;
    render(): JSX.Element;
}
